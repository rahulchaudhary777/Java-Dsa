package oops.linkedList;

public class circularLinkedList {
    
    int data;
    circularLinkedList next;

    public circularLinkedList(int data){
        this.data = data;
    }

    public static void main(String[] args) {

        Circular obj = new Circular();
        obj.insertAtLast(12);
        obj.insertAtLast(13);
        obj.insertAtLast(14);
        obj.insertAtLast(15);
        obj.insertAtLast(16);

        //obj.insertAtIndex(1,100);
        //obj.deleteFromFirst();
        obj.deleteFromLast();


        obj.display();
    }
}
class Circular{

    circularLinkedList head, tail;

 // add element at first index
 
    public void insertAtFirst(int nnode){
        circularLinkedList newnode = new circularLinkedList(nnode);

        if(head == null){
            head = tail = newnode;
            newnode.next = head;
        }
        else{
           newnode.next = head;
           head = newnode;
           tail.next = head;
        }
    }
    
    public void insertAtLast(int nnode){
        circularLinkedList newnode = new circularLinkedList(nnode);
        
        if(head == null){
            head = tail = newnode;
            newnode.next = head;
        }
        else{
            circularLinkedList temp = head;
            while(temp.next != head){
                temp = temp.next;
            }
            tail.next = newnode;
            newnode.next = head;
            tail = newnode;
        }
    }
    public int size(){
    
        int s = 0;
        if(head == null){
            s=0;
        }
        else{
            circularLinkedList temp = head;
            while (temp.next != head){
                s++;
                temp = temp.next;
            }
        }
        return s;
    }

    // insert element at given index

    public void insertAtIndex(int index, int nnode){

        // create object of circularLinkedList class and convert int data into object
        
        circularLinkedList newnode = new circularLinkedList(nnode);

        if(index >= size()){
            System.out.println("Invalid Index");
            return;
        }
        else{
            if(head == null){
                head = tail = newnode;
                newnode.next = head;
            }
            else{
                circularLinkedList temp = head;
                int i = 1;
                while(temp.next != head){
                    if(i == index){
                        newnode.next = temp.next;
                        temp.next = newnode;
                    }
                    i++;
                    temp = temp.next;
                }
            }
        }
    }

    public void deleteFromFirst(){
    
        if(head == null){
            System.out.println("Empty linked-List at deleteFromFirst operation");
        }
        else{
            head = head.next;
            tail.next = head;
        }
    }

    // Delete element from last of circular linked-List
    
    public void deleteFromLast(){
    
        if(head == null){
            System.out.println("Empty linked-List at deleteFromLast operation");
        }
        else{
            // delete elements from last if linked-List is not empty
            
            circularLinkedList temp = head;

            while(temp.next.next != head){
                // Initialize second last element of linked-List with head value
                // so that at the display time function stop at second last element.
                
                temp = temp.next;
            }
            temp.next = head;
        }
    }

    // Display elements of circular linked-List
    
    public void display(){
    
        if(head == null){
            System.out.println("Empty linked-List");
        }
        else{
            circularLinkedList temp = head;
            while(temp.next != head){
                System.out.println(temp.data);
                temp = temp.next;
            }
            // it prints last element of linked-List
            
            System.out.println(temp.data);
        }
    }
}
